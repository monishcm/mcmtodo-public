name: 4.Todo Build (more parallelism and passing output from one job to another)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/**.md'
      - './img/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_PATH_TODO_UI: './src/todo.ui/todo.ui.csproj'
  PROJECT_PATH_TODO_REPO: './src/todo.repo/todo.repo.csproj'
  PROJECT_PATH_TODO_INFRA_BICEP: './src/todo.infra/azuredeploy.bicep'
  PROJECT_PATH_TODO_INFRA_JSON: './src/todo.infra/azuredeploy.json'
  PROJECT_OUT_PATH_TODO_UI: './out/todo.ui'
  PROJECT_OUT_PATH_TODO_REPO: './out/todo.repo'
  PROJECT_DIR_PATH_TODO_INFRA: './src/todo.infra/'
  RESOURCE_GROUP: tododevops-dev

  PROJECT_PATH_TODO_INFRA_PARAM: './src/todo.infra/azuredeploy.parameters.dev.json'

jobs:

  build_repo:
  
    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v2

      # Build projects
    
    - name: build and publish todo repo
      run: |
        dotnet restore ${{env.PROJECT_PATH_TODO_REPO}}
        dotnet build ${{env.PROJECT_PATH_TODO_REPO}} --configuration Release
        dotnet publish ${{env.PROJECT_PATH_TODO_REPO}} -c Release -o '${{ env.PROJECT_OUT_PATH_TODO_REPO }}' 

    # upload artifacts
    - name: upload repo artifacts
      uses: actions/upload-artifact@v2
      with:
          name: package.repo
          path: '${{ env.PROJECT_OUT_PATH_TODO_REPO }}'

  build_ui:

    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v2

    - name: build and publish todo ui
      run: |
        dotnet restore ${{env.PROJECT_PATH_TODO_UI}}
        dotnet build ${{env.PROJECT_PATH_TODO_UI}} --configuration Release
        dotnet publish ${{env.PROJECT_PATH_TODO_UI}} -c Release -o '${{ env.PROJECT_OUT_PATH_TODO_UI }}' 

    # upload artifacts
    - name: upload ui artifacts
      uses: actions/upload-artifact@v2
      with:
          name: package.ui
          path: '${{ env.PROJECT_OUT_PATH_TODO_UI }}'

  deploy_infra_dev:
  
    runs-on: ubuntu-latest
    
    steps:
    
    - uses: actions/checkout@v2

    - name: 'build bicep ðŸ’ª'
      run: |
        az bicep build --file ${{env.PROJECT_PATH_TODO_INFRA_BICEP}}
    
    - name: login to azure from cli
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: create/update infrastructure from arm template
      uses: azure/CLI@v1
      with:
        inlineScript: |
          outputs=$(az deployment group create -g ${{env.RESOURCE_GROUP}} --template-file ${{env.PROJECT_PATH_TODO_INFRA_JSON}} --parameters ${{env.PROJECT_PATH_TODO_INFRA_PARAM}})
          webapp_name_repo_out=$(echo $outputs | jq -r .properties.outputs.webapp_name_repo.value)
          webapp_name_ui_out=$(echo $outputs | jq -r .properties.outputs.webapp_name_ui.value)
          echo webapp_name_repo=$webapp_name_repo_out >> $GITHUB_ENV
          echo webapp_name_ui=$webapp_name_ui_out >> $GITHUB_ENV
    
    - name: logout
      run: |
         az logout

    # use cache to transfer data between jobs
    - name: store azure web app url to file
      shell: bash
      run: |
        mkdir -p datashare_infra
        echo ${{env.webapp_name_repo}} > ./datashare_infra/webapp_name_repo.txt
        echo ${{env.webapp_name_repo}} > ./datashare_infra/webapp_name_ui.txt
    
    - name: cache web app url file
      uses: actions/cache@v2
      env:
        cache-name: infra_dev_out_cache
      with:
        path: ./datashare_infra/
        key:  infra_dev_out_${{ github.run_number }}_${{ github.run_id }}

  deploy_repo_dev:
  
    needs: [deploy_infra_dev, build_repo]

    runs-on: ubuntu-latest
    
    steps:
    
    - uses: actions/download-artifact@v2
      with:
        name: package.repo
        path: ./release

    - name: restore web app url cache
      uses: actions/cache@v2
      env:
        cache-name: infra_dev_out_cache
      with:
        path: ./datashare_infra/
        key:  infra_dev_out_${{ github.run_number }}_${{ github.run_id }}

    - name: extract repo web api url from cache
      shell: bash
      run: |
          echo webapp_name_repo=`cat ./datashare_infra/webapp_name_repo.txt` >> $GITHUB_ENV

    - name: login to azure from cli
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'deploy todo repo'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.webapp_name_repo }}
        package: ./release

    - name: logout
      run: |
        az logout

  deploy_ui_dev:
  
    needs: [deploy_infra_dev, build_ui]

    runs-on: ubuntu-latest
    
    steps:
    
    - uses: actions/download-artifact@v2
      with:
        name: package.ui
        path: ./release/

    - name: restore web app url cache
      uses: actions/cache@v2
      env:
        cache-name: infra_dev_out_cache
      with:
        path: ./datashare_infra/
        key:  infra_dev_out_${{ github.run_number }}_${{ github.run_id }}

    - name: extract ui web app url from cache
      shell: bash
      run: |
          echo webapp_name_ui=`cat ./datashare_infra/webapp_name_ui.txt` >> $GITHUB_ENV

    - name: login to azure from cli
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'deploy todo ui'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.webapp_name_ui }}
        package: ./release/

    - name: logout
      run: |
        az logout
